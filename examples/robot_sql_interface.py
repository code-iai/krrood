# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column, DeclarativeBase

import __main__
import typing


from krrood.ormatic.dao import DataAccessObject
from krrood.ormatic.custom_types import TypeType

class Base(DeclarativeBase):
    type_mappings = {
    }


class TaskDAO(Base, DataAccessObject[__main__.Task]):

    __tablename__ = 'TaskDAO'

    database_id: Mapped[builtins.int] = mapped_column(Integer, primary_key=True, use_existing_column=True)







class RobotDAO(Base, DataAccessObject[__main__.Robot]):

    __tablename__ = 'RobotDAO'

    database_id: Mapped[builtins.int] = mapped_column(Integer, primary_key=True, use_existing_column=True)







class LocationDAO(Base, DataAccessObject[__main__.Location]):

    __tablename__ = 'LocationDAO'

    database_id: Mapped[builtins.int] = mapped_column(Integer, primary_key=True, use_existing_column=True)







